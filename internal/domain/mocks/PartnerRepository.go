// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "customer-partner/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// PartnerRepository is an autogenerated mock type for the PartnerRepository type
type PartnerRepository struct {
	mock.Mock
}

// GetPartnerByID provides a mock function with given fields: id
func (_m *PartnerRepository) GetPartnerByID(id string) (entities.Partner, error) {
	ret := _m.Called(id)

	var r0 entities.Partner
	if rf, ok := ret.Get(0).(func(string) entities.Partner); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Partner)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartnersByMaterial provides a mock function with given fields: material
func (_m *PartnerRepository) GetPartnersByMaterial(material string) []entities.Partner {
	ret := _m.Called(material)

	var r0 []entities.Partner
	if rf, ok := ret.Get(0).(func(string) []entities.Partner); ok {
		r0 = rf(material)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Partner)
		}
	}

	return r0
}

type mockConstructorTestingTNewPartnerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPartnerRepository creates a new instance of PartnerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPartnerRepository(t mockConstructorTestingTNewPartnerRepository) *PartnerRepository {
	mock := &PartnerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
